https://stackoverflow.com/questions/34950611/how-to-create-a-pbkdf2-sha256-password-hash-in-c-sharp-bouncy-castle




http://www.programcreek.com/java-api-examples/index.php?api=org.bouncycastle.crypto.digests.MD5Digest



https://stackoverflow.com/questions/1300890/md5-hash-with-salt-for-keeping-password-in-db-in-c-sharp




http://www.obviex.com/samples/hash.aspx
https://stackoverflow.com/questions/7303266/difference-between-salt-and-key-encryption



https://stackoverflow.com/questions/7303266/difference-between-salt-and-key-encryption
This really comes into use when you iteratively encrypt, eg,
result = salt + encrypt(salt+encrypt(salt+encrypt(message))).




foo + asdf = e967c9fead712d976ed6fb3d3544ee6a
foo + zxcv = a6fa8477827b2d1a4c4824e66703daa9
So 'salt' makes a 'hash' better by obscuring the original text.



https://security.stackexchange.com/questions/80904/what-are-the-differences-between-an-encryption-seed-and-salt

https://stackoverflow.com/questions/1300890/md5-hash-with-salt-for-keeping-password-in-db-in-c-sharp

You can use the HMACMD5 class:

var hmacMD5 = new HMACMD5(salt);
var saltedHash = hmacMD5.ComputeHash(password);


A HMAC is usually used to get the keyed hash of a message. 
If you replace the key with a salt and the message with your password, 
you can use the HMAC to get the salted hash of a password.





https://stackoverflow.com/questions/34950611/how-to-create-a-pbkdf2-sha256-password-hash-in-c-sharp-bouncy-castle



Bouncy Castle is Australian in origin, and therefore is not subject to the Export of cryptography from the United States.


https://github.com/bcgit/bc-csharp/issues

https://stackoverflow.com/questions/10175812/how-to-create-a-self-signed-certificate-with-openssl


http://www.akadia.com/services/ssh_test_certificate.html


https://kjur.github.io/jsjws/tool_jwt.html



https://stackoverflow.com/questions/40367279/rsasecuritykey-does-not-take-rsaparameters-as-arguments


https://github.com/Microsoft/referencesource/blob/master/System.IdentityModel/System/IdentityModel/Tokens/RsaSecurityKey.cs

https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/master/src/Microsoft.IdentityModel.Tokens/RsaSecurityKey.cs

public class RsaSecurityKey : AsymmetricSecurityKey

  public RsaSecurityKey(RSAParameters rsaParameters)
 public RsaSecurityKey(RSA rsa)


https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/master/src/Microsoft.IdentityModel.Tokens/ECDsaSecurityKey.cs
public ECDsaSecurityKey(ECDsa ecdsa)


https://github.com/mono/mono/blob/master/mcs/class/System/System.Security.Cryptography.X509Certificates/X509Certificate2.cs

https://referencesource.microsoft.com/#System/security/system/security/cryptography/x509/x509certificate2.cs
https://github.com/dotnet/corefx/blob/master/src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate2.cs

https://github.com/ststeiger/Arsoft/blob/master/BouncyCastle/src/security/DotNetUtilities.cs
https://github.com/dotnet/corefx/blob/master/src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/RSAParameters.cs






https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/issues/337

